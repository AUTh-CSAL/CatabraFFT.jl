
module_expr = :(module radix_2_family
  #= none:1 =#
  #= none:2 =#
  using LoopVectorization
  #= none:8 =#
  #= none:8 =# @inline function fft4_shell!(y::AbstractArray{Complex{Float64}, 1}, x::AbstractArray{Complex{Float64}, 1})
          #= none:8 =#
          #= none:9 =#
          #= none:9 =# @inbounds begin
                  #= none:10 =#
                  x1 = reim(x[1])
                  #= none:10 =#
                  x2 = reim(x[2])
                  #= none:10 =#
                  x3 = reim(x[3])
                  #= none:10 =#
                  x4 = reim(x[4])
                  #= none:11 =#
                  (t1_r, t1_i, t2_r, t2_i) = (x1[1] + x3[1], x1[2] + x3[2], x1[1] - x3[1], x1[2] - x3[2])
                  #= none:12 =#
                  (t3_r, t3_i, t4_r, t4_i) = (x2[1] + x4[1], x2[2] + x4[2], x2[2] - x4[2], x4[1] - x2[1])
                  #= none:13 =#
                  (y[1], y[2]) = (Complex{Float64}(t1_r + t3_r, t1_i + t3_i), Complex{Float64}(t2_r + t4_r, t2_i + t4_i))
                  #= none:14 =#
                  (y[3], y[4]) = (Complex{Float64}(t1_r - t3_r, t1_i - t3_i), Complex{Float64}(t2_r - t4_r, t2_i - t4_i))
              end
      end
  end)
Testing module for plan: CatabraFFT.Radix_Plan.RadixPlan{Float64}(CatabraFFT.Radix_Plan.FFTOp[CatabraFFT.Radix_Plan.FFTOp(:fft4, :x, :y, 1, 4, false)], 4)
Test elapsed time: 4.215e-6 seconds
Best function: RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:y, :x), CatabraFFT.Radix_Execute.var"#_RGF_ModTag", CatabraFFT.Radix_Execute.var"#_RGF_ModTag", (0xf08cb02b, 0x5a60c728, 0x419d99eb, 0xbebc5f3a, 0x66ac1996), Expr}(quote
    #= /home/ekyriakos/CatabraFFT.jl/src/radix_exec.jl:83 =#
    #= /home/ekyriakos/CatabraFFT.jl/src/radix_exec.jl:84 =#
    begin
        (CatabraFFT.Radix_Execute.radix_2_family.fft4_shell!)(y, x)
    end
    #= /home/ekyriakos/CatabraFFT.jl/src/radix_exec.jl:85 =#
    return nothing
end) with time: 4.215e-6 seconds
STATIC FUNC GEN
Creating new module
 FFT: fft8 : Dstatus : 0
(w, x1, sign, x2) = ("-im", "x3", "-", "x7")
(w, x1, sign, x2) = ("-im", "x4", "-", "x8")
(w, x1, sign, x2) = ("INV_SQRT2_Q4", "t14", "+", "t16")
(w, x1, sign, x2) = ("-im", "t13", "-", "t15")
(w, x1, sign, x2) = ("-INV_SQRT2_Q1", "t14", "-", "t16")
module_expr = :(module radix_2_family
  #= none:1 =#
  #= none:2 =#
  using LoopVectorization
  #= none:6 =#
  const INV_SQRT2::Float64 = 0.7071067811865475
  #= none:9 =#
  #= none:9 =# @inline function fft8_shell!(y::AbstractArray{Complex{Float64}, 1}, x::AbstractArray{Complex{Float64}, 1})
          #= none:9 =#
          #= none:10 =#
          #= none:10 =# @inbounds begin
                  #= none:11 =#
                  x1 = reim(x[1])
                  #= none:11 =#
                  x2 = reim(x[2])
                  #= none:11 =#
                  x3 = reim(x[3])
                  #= none:11 =#
                  x4 = reim(x[4])
                  #= none:11 =#
                  x5 = reim(x[5])
                  #= none:11 =#
                  x6 = reim(x[6])
                  #= none:11 =#
                  x7 = reim(x[7])
                  #= none:11 =#
                  x8 = reim(x[8])
                  #= none:12 =#
                  (t9_r, t9_i, t10_r, t10_i) = (x1[1] + x5[1], x1[2] + x5[2], x1[1] - x5[1], x1[2] - x5[2])
                  #= none:13 =#
                  (t11_r, t11_i, t12_r, t12_i) = (x3[1] + x7[1], x3[2] + x7[2], x3[2] - x7[2], x7[1] - x3[1])
                  #= none:14 =#
                  (t1_r, t1_i, t2_r, t2_i) = (t9_r + t11_r, t9_i + t11_i, t10_r + t12_r, t10_i + t12_i)
                  #= none:15 =#
                  (t3_r, t3_i, t4_r, t4_i) = (t9_r - t11_r, t9_i - t11_i, t10_r - t12_r, t10_i - t12_i)
                  #= none:16 =#
                  (t13_r, t13_i, t14_r, t14_i) = (x2[1] + x6[1], x2[2] + x6[2], x2[1] - x6[1], x2[2] - x6[2])
                  #= none:17 =#
                  (t15_r, t15_i, t16_r, t16_i) = (x4[1] + x8[1], x4[2] + x8[2], x4[2] - x8[2], x8[1] - x4[1])
                  #= none:18 =#
                  (t5_r, t5_i, t6_r, t6_i) = (t13_r + t15_r, t13_i + t15_i, INV_SQRT2 * ((t14_r + t16_r) + (t14_i + t16_i)), INV_SQRT2 * ((t14_i + t16_i) - (t14_r + t16_r)))
                  #= none:19 =#
                  (t7_r, t7_i, t8_r, t8_i) = (t13_i - t15_i, t15_r - t13_r, INV_SQRT2 * ((t14_i - t16_i) - (t14_r - t16_r)), -INV_SQRT2 * ((t14_r - t16_r) + (t14_i - t16_i)))
                  #= none:20 =#
                  (y[1], y[2], y[3], y[4]) = (Complex{Float64}(t1_r + t5_r, t1_i + t5_i), Complex{Float64}(t2_r + t6_r, t2_i + t6_i), Complex{Float64}(t3_r + t7_r, t3_i + t7_i), Complex{Float64}(t4_r + t8_r, t4_i + t8_i))
                  #= none:21 =#
                  (y[5], y[6], y[7], y[8]) = (Complex{Float64}(t1_r - t5_r, t1_i - t5_i), Complex{Float64}(t2_r - t6_r, t2_i - t6_i), Complex{Float64}(t3_r - t7_r, t3_i - t7_i), Complex{Float64}(t4_r - t8_r, t4_i - t8_i))
              end
      end
  end)
WARNING: replacing module radix_2_family.
Testing module for plan: CatabraFFT.Radix_Plan.RadixPlan{Float64}(CatabraFFT.Radix_Plan.FFTOp[CatabraFFT.Radix_Plan.FFTOp(:fft8, :x, :y, 1, 8, false)], 8)
Test elapsed time: 3.835e-6 seconds
Best function: RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:y, :x), CatabraFFT.Radix_Execute.var"#_RGF_ModTag", CatabraFFT.Radix_Execute.var"#_RGF_ModTag", (0x3a8a9698, 0x21f321ec, 0x626be2ff, 0xc2ffcf6d, 0xca5c12d7), Expr}(quote
    #= /home/ekyriakos/CatabraFFT.jl/src/radix_exec.jl:83 =#
    #= /home/ekyriakos/CatabraFFT.jl/src/radix_exec.jl:84 =#
    begin
        (CatabraFFT.Radix_Execute.radix_2_family.fft8_shell!)(y, x)
    end
    #= /home/ekyriakos/CatabraFFT.jl/src/radix_exec.jl:85 =#
    return nothing
end) with time: 3.835e-6 seconds
STATIC FUNC GEN
Creating new module
 FFT: fft16 : Dstatus : 0
(w, x1, sign, x2) = ("-im", "x5", "-", "x13")
(w, x1, sign, x2) = ("-im", "x7", "-", "x15")
(w, x1, sign, x2) = ("INV_SQRT2_Q4", "t30", "+", "t32")
(w, x1, sign, x2) = ("-im", "t29", "-", "t31")
(w, x1, sign, x2) = ("-INV_SQRT2_Q1", "t30", "-", "t32")
(w, x1, sign, x2) = ("-im", "x6", "-", "x14")
(w, x1, sign, x2) = ("-im", "x8", "-", "x16")
(w, x1, sign, x2) = ("INV_SQRT2_Q4", "t46", "+", "t48")
(w, x1, sign, x2) = ("-im", "t45", "-", "t47")
(w, x1, sign, x2) = ("-INV_SQRT2_Q1", "t46", "-", "t48")
(w, x1, sign, x2) = ("-im*CISPI_3_8_Q1", "t34", "+", "t38")
(w, x1, sign, x2) = ("INV_SQRT2_Q4", "t35", "+", "t39")
(w, x1, sign, x2) = ("CISPI_3_8_Q4", "t36", "+", "t40")
(w, x1, sign, x2) = ("-im", "t33", "-", "t37")
(w, x1, sign, x2) = ("-CISPI_3_8_Q1", "t34", "-", "t38")
(w, x1, sign, x2) = ("-INV_SQRT2_Q1", "t35", "-", "t39")
(w, x1, sign, x2) = ("-im*CISPI_3_8_Q4", "t36", "-", "t40")
module_expr = :(module radix_2_family
  #= none:1 =#
  #= none:2 =#
  using LoopVectorization
  #= none:7 =#
  const COSPI_3_8::Float64 = 0.3826834323650898
  #= none:8 =#
  const SINPI_3_8::Float64 = 0.9238795325112867
  #= none:10 =#
  const INV_SQRT2::Float64 = 0.7071067811865475
  #= none:13 =#
  #= none:13 =# @inline function fft16_shell!(y::AbstractArray{Complex{Float64}, 1}, x::AbstractArray{Complex{Float64}, 1})
          #= none:13 =#
          #= none:14 =#
          #= none:14 =# @inbounds begin
                  #= none:15 =#
                  x1 = reim(x[1])
                  #= none:15 =#
                  x2 = reim(x[2])
                  #= none:15 =#
                  x3 = reim(x[3])
                  #= none:15 =#
                  x4 = reim(x[4])
                  #= none:15 =#
                  x5 = reim(x[5])
                  #= none:15 =#
                  x6 = reim(x[6])
                  #= none:15 =#
                  x7 = reim(x[7])
                  #= none:15 =#
                  x8 = reim(x[8])
                  #= none:15 =#
                  x9 = reim(x[9])
                  #= none:15 =#
                  x10 = reim(x[10])
                  #= none:15 =#
                  x11 = reim(x[11])
                  #= none:15 =#
                  x12 = reim(x[12])
                  #= none:15 =#
                  x13 = reim(x[13])
                  #= none:15 =#
                  x14 = reim(x[14])
                  #= none:15 =#
                  x15 = reim(x[15])
                  #= none:15 =#
                  x16 = reim(x[16])
                  #= none:16 =#
                  (t25_r, t25_i, t26_r, t26_i) = (x1[1] + x9[1], x1[2] + x9[2], x1[1] - x9[1], x1[2] - x9[2])
                  #= none:17 =#
                  (t27_r, t27_i, t28_r, t28_i) = (x5[1] + x13[1], x5[2] + x13[2], x5[2] - x13[2], x13[1] - x5[1])
                  #= none:18 =#
                  (t17_r, t17_i, t18_r, t18_i) = (t25_r + t27_r, t25_i + t27_i, t26_r + t28_r, t26_i + t28_i)
                  #= none:19 =#
                  (t19_r, t19_i, t20_r, t20_i) = (t25_r - t27_r, t25_i - t27_i, t26_r - t28_r, t26_i - t28_i)
                  #= none:20 =#
                  (t29_r, t29_i, t30_r, t30_i) = (x3[1] + x11[1], x3[2] + x11[2], x3[1] - x11[1], x3[2] - x11[2])
                  #= none:21 =#
                  (t31_r, t31_i, t32_r, t32_i) = (x7[1] + x15[1], x7[2] + x15[2], x7[2] - x15[2], x15[1] - x7[1])
                  #= none:22 =#
                  (t21_r, t21_i, t22_r, t22_i) = (t29_r + t31_r, t29_i + t31_i, INV_SQRT2 * ((t30_r + t32_r) + (t30_i + t32_i)), INV_SQRT2 * ((t30_i + t32_i) - (t30_r + t32_r)))
                  #= none:23 =#
                  (t23_r, t23_i, t24_r, t24_i) = (t29_i - t31_i, t31_r - t29_r, INV_SQRT2 * ((t30_i - t32_i) - (t30_r - t32_r)), -INV_SQRT2 * ((t30_r - t32_r) + (t30_i - t32_i)))
                  #= none:24 =#
                  (t1_r, t1_i, t2_r, t2_i, t3_r, t3_i, t4_r, t4_i) = (t17_r + t21_r, t17_i + t21_i, t18_r + t22_r, t18_i + t22_i, t19_r + t23_r, t19_i + t23_i, t20_r + t24_r, t20_i + t24_i)
                  #= none:25 =#
                  (t5_r, t5_i, t6_r, t6_i, t7_r, t7_i, t8_r, t8_i) = (t17_r - t21_r, t17_i - t21_i, t18_r - t22_r, t18_i - t22_i, t19_r - t23_r, t19_i - t23_i, t20_r - t24_r, t20_i - t24_i)
                  #= none:26 =#
                  (t41_r, t41_i, t42_r, t42_i) = (x2[1] + x10[1], x2[2] + x10[2], x2[1] - x10[1], x2[2] - x10[2])
                  #= none:27 =#
                  (t43_r, t43_i, t44_r, t44_i) = (x6[1] + x14[1], x6[2] + x14[2], x6[2] - x14[2], x14[1] - x6[1])
                  #= none:28 =#
                  (t33_r, t33_i, t34_r, t34_i) = (t41_r + t43_r, t41_i + t43_i, t42_r + t44_r, t42_i + t44_i)
                  #= none:29 =#
                  (t35_r, t35_i, t36_r, t36_i) = (t41_r - t43_r, t41_i - t43_i, t42_r - t44_r, t42_i - t44_i)
                  #= none:30 =#
                  (t45_r, t45_i, t46_r, t46_i) = (x4[1] + x12[1], x4[2] + x12[2], x4[1] - x12[1], x4[2] - x12[2])
                  #= none:31 =#
                  (t47_r, t47_i, t48_r, t48_i) = (x8[1] + x16[1], x8[2] + x16[2], x8[2] - x16[2], x16[1] - x8[1])
                  #= none:32 =#
                  (t37_r, t37_i, t38_r, t38_i) = (t45_r + t47_r, t45_i + t47_i, INV_SQRT2 * ((t46_r + t48_r) + (t46_i + t48_i)), INV_SQRT2 * ((t46_i + t48_i) - (t46_r + t48_r)))
                  #= none:33 =#
                  (t39_r, t39_i, t40_r, t40_i) = (t45_i - t47_i, t47_r - t45_r, INV_SQRT2 * ((t46_i - t48_i) - (t46_r - t48_r)), -INV_SQRT2 * ((t46_r - t48_r) + (t46_i - t48_i)))
                  #= none:34 =#
                  (t9_r, t9_i, t10_r, t10_i, t11_r, t11_i, t12_r, t12_i) = (t33_r + t37_r, t33_i + t37_i, muladd(SINPI_3_8, t34_r + t38_r, COSPI_3_8 * (t34_i + t38_i)), muladd(-COSPI_3_8, t34_r + t38_r, SINPI_3_8 * (t34_i + t38_i)), INV_SQRT2 * ((t35_r + t39_r) + (t35_i + t39_i)), INV_SQRT2 * ((t35_i + t39_i) - (t35_r + t39_r)), muladd(COSPI_3_8, t36_r + t40_r, SINPI_3_8 * (t36_i + t40_i)), muladd(-SINPI_3_8, t36_r + t40_r, COSPI_3_8 * (t36_i + t40_i)))
                  #= none:35 =#
                  (t13_r, t13_i, t14_r, t14_i, t15_r, t15_i, t16_r, t16_i) = (t33_i - t37_i, t37_r - t33_r, muladd(-COSPI_3_8, t34_r - t38_r, SINPI_3_8 * (t34_i - t38_i)), muladd(-SINPI_3_8, t34_r - t38_r, -COSPI_3_8 * (t34_i - t38_i)), INV_SQRT2 * ((t35_i - t39_i) - (t35_r - t39_r)), -INV_SQRT2 * ((t35_r - t39_r) + (t35_i - t39_i)), muladd(-SINPI_3_8, t36_r - t40_r, COSPI_3_8 * (t36_i - t40_i)), muladd(-COSPI_3_8, t36_r - t40_r, -SINPI_3_8 * (t36_i - t40_i)))
                  #= none:36 =#
                  (y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8]) = (Complex{Float64}(t1_r + t9_r, t1_i + t9_i), Complex{Float64}(t2_r + t10_r, t2_i + t10_i), Complex{Float64}(t3_r + t11_r, t3_i + t11_i), Complex{Float64}(t4_r + t12_r, t4_i + t12_i), Complex{Float64}(t5_r + t13_r, t5_i + t13_i), Complex{Float64}(t6_r + t14_r, t6_i + t14_i), Complex{Float64}(t7_r + t15_r, t7_i + t15_i), Complex{Float64}(t8_r + t16_r, t8_i + t16_i))
                  #= none:37 =#
                  (y[9], y[10], y[11], y[12], y[13], y[14], y[15], y[16]) = (Complex{Float64}(t1_r - t9_r, t1_i - t9_i), Complex{Float64}(t2_r - t10_r, t2_i - t10_i), Complex{Float64}(t3_r - t11_r, t3_i - t11_i), Complex{Float64}(t4_r - t12_r, t4_i - t12_i), Complex{Float64}(t5_r - t13_r, t5_i - t13_i), Complex{Float64}(t6_r - t14_r, t6_i - t14_i), Complex{Float64}(t7_r - t15_r, t7_i - t15_i), Complex{Float64}(t8_r - t16_r, t8_i - t16_i))
              end
      end
  end)
